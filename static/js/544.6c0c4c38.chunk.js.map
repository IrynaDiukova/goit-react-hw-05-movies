{"version":3,"file":"static/js/544.6c0c4c38.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.jsx","pages/Home/Home.jsx","constants.js","services/api-servises.js"],"sourcesContent":["\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Box } from 'components/Box';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <Box as=\"ul\" p={2}>\n      {movies.map(({ id, title }) => {\n        return (\n          <Box as=\"li\" key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              {title}\n            </Link>\n          </Box>\n        );\n      })}\n    </Box>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default MoviesList;","import { useEffect, useState } from 'react';\nimport moviesAPI from 'services/api-servises';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nconst Home = () => {\n    const [movies, setMovies] = useState([]);\n        \n    useEffect(() => {\n        async function fetchTrends() {\n            try {\n                const { results } = await moviesAPI.getTrendings();\n                if (!results.length) {\n                    console.log('Sorry, no results');\n                    return;\n                }\n                setMovies([...results]);\n            }   catch (error) {\n                console.log(error.message);\n            }\n        }\n        fetchTrends();\n    }, []);\n\n    return (\n        <div>\n            <h1>Trending today</h1>\n            <MoviesList movies={movies} />\n        </div>\n    );\n};\n\nexport default Home;","export const moviedb = {\n  BASE_URL: 'https://api.themoviedb.org/3/',\n  POSTER_BASE_URL: 'https://image.tmdb.org/t/p/w500/',\n  POSTER_PLACEHOLDER_URL: 'https://placehold.co/500x750?text=No+Image',\n  API_KEY: '68fa3d310c9d2cffbb85ba21d660e67a',\n  LANGUAGE: 'en-US',\n  INCLUDE_ADULT: false,\n};","import axios from 'axios';\nimport { moviedb as config } from '../constants';\n\n\naxios.defaults.baseURL = config.BASE_URL;\n\nconst params = {\n  params: {\n    api_key: config.API_KEY,\n    language: config.LANGUAGE,\n    include_adult: config.INCLUDE_ADULT,\n  },\n};\n\nasync function getTrendings(page = 1) {\n  const urlAXIOS = `trending/movie/day?page=${page}`;\n  const { data } = await axios.get(urlAXIOS, params);\n\n  const normalizedResults = data.results.map(({ id, title }) => ({\n    id,\n    title,\n  }));\n\n  data.results = normalizedResults;\n  return data;\n}\n\nasync function getMovieDetails(movieId) {\n  const urlAXIOS = `movie/${movieId}`;\n\n  const { data } = await axios.get(urlAXIOS, params);\n  const { original_title, overview, vote_average, genres, poster_path } = data;\n\n  return {\n    original_title,\n    overview,\n    vote_average: vote_average.toFixed(1),\n    genres,\n    poster_path: poster_path\n      ? config.POSTER_BASE_URL + poster_path\n      : config.POSTER_PLACEHOLDER_URL,\n  };\n}\n\nasync function getCredits(movieId) {\n  const urlAXIOS = `movie/${movieId}/credits`;\n  const { data } = await axios.get(urlAXIOS, params);\n\n  const normalizedCast = data.cast.map(\n    ({ character, original_name, profile_path }) => ({\n      character,\n      original_name,\n      profile_path: profile_path\n        ? config.POSTER_BASE_URL + profile_path\n        : config.POSTER_PLACEHOLDER_URL,\n    })\n  );\n\n  data.cast = normalizedCast;\n  return data;\n}\n\nasync function getReviews(movieId) {\n  const urlAXIOS = `movie/${movieId}/reviews`;\n  const { data } = await axios.get(urlAXIOS, params);\n\n  const normalizedResults = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n\n  data.results = normalizedResults;\n  return data;\n}\n\nasync function searchMovies(query) {\n  const urlAXIOS = `search/movie?query=${query}`;\n  const { data } = await axios.get(urlAXIOS, params);\n\n  const normalizedResults = data.results.map(({ id, title }) => ({\n    id,\n    title,\n  }));\n\n  data.results = normalizedResults;\n  return data;\n}\n\nconst api = {\n  getTrendings,\n  getMovieDetails,\n  getCredits,\n  getReviews,\n  searchMovies,\n};\n\nexport default api;"],"names":["movies","location","useLocation","as","p","map","id","title","to","state","from","useState","setMovies","useEffect","moviesAPI","results","length","console","log","message","fetchTrends","moviedb","axios","config","params","api_key","language","include_adult","getTrendings","page","urlAXIOS","data","normalizedResults","getMovieDetails","movieId","original_title","overview","vote_average","genres","poster_path","toFixed","getCredits","normalizedCast","cast","character","original_name","profile_path","getReviews","author","content","searchMovies","query","api"],"sourceRoot":""}